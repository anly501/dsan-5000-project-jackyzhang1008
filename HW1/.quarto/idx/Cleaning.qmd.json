{"title":"Cleaning","markdown":{"yaml":{"title":"Cleaning"},"headingText":"Nuclear Energy Utilization Factor","containsRefs":false,"markdown":"\n\n\n## Cleaning:\n\n\n\n### Code:\n\n```{txt}\n# From https://www.eia.gov/nuclear/generation/index.html\nimport pandas as pd\nimport numpy as np\n#pd read xlsx\nusreact13 = pd.read_excel('HW1/file/Nuclear_Generation/usreact13.xlsx')\nusreact14 = pd.read_excel('HW1/file/Nuclear_Generation/usreact14.xlsx')\nusreact15 = pd.read_excel('HW1/file/Nuclear_Generation/usreact15.xlsx')\nusreact16 = pd.read_excel('HW1/file/Nuclear_Generation/usreact16.xlsx')\nusreact17 = pd.read_excel('HW1/file/Nuclear_Generation/usreact17.xlsx')\nusreact18 = pd.read_excel('HW1/file/Nuclear_Generation/usreact18.xlsx')\nusreact19 = pd.read_excel('HW1/file/Nuclear_Generation/usreact19.xlsx')\nusreact20 = pd.read_excel('HW1/file/Nuclear_Generation/usreact20.xlsx')\nusreact21 = pd.read_excel('HW1/file/Nuclear_Generation/usreact21.xlsx')\nusreact22 = pd.read_excel('HW1/file/Nuclear_Generation/usreact22.xlsx')\n\n# create a function make row 5 as column names and remove row 0-4 and reset index and drop colum 4-17\ndef make_header(df):\n    df.columns = df.iloc[4]\n    df = df.drop(df.index[0:5])\n    df = df.reset_index(drop=True)\n    df = df.drop(df.columns[4:17], axis=1)\n    return df\n\n# apply the function to all dataframes\nusreact13 = make_header(usreact13)\nusreact14 = make_header(usreact14)\nusreact15 = make_header(usreact15)\nusreact16 = make_header(usreact16)\nusreact17 = make_header(usreact17)\nusreact18 = make_header(usreact18)\nusreact19 = make_header(usreact19)\nusreact20 = make_header(usreact20)\nusreact21 = make_header(usreact21)\nusreact22 = make_header(usreact22)\n\n# create a function to replace \".\" and empty space with NaN, drop \"Plant ID\" column and rename \"Plant Name\" to \"Plant\", make colum \"Nameplate\",\"Summer\", \"Utilization Factor\" as numeric\ndef clean_df(df):\n    df = df.replace(r'^\\s*$', np.nan, regex=True)\n    df = df.drop(columns=['Plant ID'])\n    df = df.rename(columns={'Plant Name':'Plant'})\n    df['Nameplate'] = pd.to_numeric(df['Nameplate'], errors='coerce')\n    df['Summer'] = pd.to_numeric(df['Summer'], errors='coerce')\n    df['Utilization Factor'] = pd.to_numeric(df['Utilization Factor'], errors='coerce')\n    return df\n\n# apply the function to all dataframes\nusreact13 = clean_df(usreact13)\nusreact14 = clean_df(usreact14)\nusreact15 = clean_df(usreact15)\nusreact16 = clean_df(usreact16)\nusreact17 = clean_df(usreact17)\nusreact18 = clean_df(usreact18)\nusreact19 = clean_df(usreact19)\nusreact20 = clean_df(usreact20)\nusreact21 = clean_df(usreact21)\nusreact22 = clean_df(usreact22)\n\n# drop rows that colum \"State\" end with \"Total\" and reset index\ndef drop_total(df):\n    df = df[~df['State'].str.contains(\"Total\")]\n    df = df.reset_index(drop=True)\n    df = df.drop(columns=['Unit ID'])\n    return df\n\n# apply the function to all dataframes\nusreact13 = drop_total(usreact13)\nusreact14 = drop_total(usreact14)\nusreact15 = drop_total(usreact15)\nusreact16 = drop_total(usreact16)\nusreact17 = drop_total(usreact17)\nusreact18 = drop_total(usreact18)\nusreact19 = drop_total(usreact19)\nusreact20 = drop_total(usreact20)\nusreact21 = drop_total(usreact21)\nusreact22 = drop_total(usreact22)\n\n# drop state column, Nameplate, Summer than group by plant and average the data to one decimal place and reset index\ndef group_plant(df):\n    df = df.drop(columns=['State', 'Nameplate', 'Summer'])\n    df = df.groupby(['Plant'], as_index=False).mean().round(1)\n    df = df.reset_index(drop=True)\n    return df\n# apply the function to all dataframes\nusreact13 = group_plant(usreact13)\nusreact14 = group_plant(usreact14)\nusreact15 = group_plant(usreact15)\nusreact16 = group_plant(usreact16)\nusreact17 = group_plant(usreact17)\nusreact18 = group_plant(usreact18)\nusreact19 = group_plant(usreact19)\nusreact20 = group_plant(usreact20)\nusreact21 = group_plant(usreact21)\nusreact22 = group_plant(usreact22)\n\n# merge all dataframes based on \"Plant\" column, create new columns 2013-2022 and fill in the data\nusreact = pd.merge(usreact13, usreact14, on='Plant', how='outer')\nusreact = usreact.rename(columns={'Utilization Factor_x':'2013', 'Utilization Factor_y':'2014'})\nusreact = pd.merge(usreact, usreact15, on='Plant', how='outer')\nusreact = usreact.rename(columns={'Utilization Factor':'2015'})\nusreact = pd.merge(usreact, usreact16, on='Plant', how='outer')\nusreact = usreact.rename(columns={'Utilization Factor':'2016'})\nusreact = pd.merge(usreact, usreact17, on='Plant', how='outer')\nusreact = usreact.rename(columns={'Utilization Factor':'2017'})\nusreact = pd.merge(usreact, usreact18, on='Plant', how='outer')\nusreact = usreact.rename(columns={'Utilization Factor':'2018'})\nusreact = pd.merge(usreact, usreact19, on='Plant', how='outer')\nusreact = usreact.rename(columns={'Utilization Factor':'2019'})\nusreact = pd.merge(usreact, usreact20, on='Plant', how='outer')\nusreact = usreact.rename(columns={'Utilization Factor':'2020'})\nusreact = pd.merge(usreact, usreact21, on='Plant', how='outer')\nusreact = usreact.rename(columns={'Utilization Factor':'2021'})\nusreact = pd.merge(usreact, usreact22, on='Plant', how='outer')\nusreact = usreact.rename(columns={'Utilization Factor':'2022'})\n\n# drop rows with NaN values and reset index\nusreact = usreact.dropna()\nusreact = usreact.reset_index(drop=True)\n\n# output the dataframe to csv\nusreact.to_csv('Nuclear_Energy_Utilization_Factor.csv', index=False)\n```\n\n## Result:\n\n![](images/paste-1.png)\n\n# **Consumption of Fuels for Electricity Generation and Useful Thermal Output(Nuclear)**\n\n## Cleaning:\n\n```{txt}\n# https://www.eia.gov/opendata/browser/electricity/electric-power-operational-data?frequency=annual&data=consumption-for-eg-btu;total-consumption-btu;&facets=fueltypeid;&fueltypeid=NUC;&start=2013&end=2022&sortColumn=period;&sortDirection=desc;\n# API_Key = \"Bc2HtlspmpvpzuBbPfIi8HoancNTzVYN9YApx3fu\"\nimport requests\nimport pandas as pd\nimport numpy as np \nimport json\nimport csv\nthor_url = \"https://api.eia.gov/v2/electricity/electric-power-operational-data/data/?frequency=annual&data[0]=consumption-for-eg-btu&data[1]=total-consumption-btu&facets[fueltypeid][]=NUC&start=2013&end=2022&sort[0][column]=period&sort[0][direction]=desc&offset=0&length=5000&api_key=Bc2HtlspmpvpzuBbPfIi8HoancNTzVYN9YApx3fu\"\nresp = requests.get(thor_url)\ndata = resp.text\ndata = json.loads(data)\ndetails=data['response']['data']\nrows=[]\nfor chunk in details:\n    row=[]\n    for key,value in chunk.items():\n        value=value if value else np.nan\n        row.append(value)\n        # print('row',row)\n    rows.append(row)\n\n# Columns\ncolumns = ['period', 'location', 'stateDescription', 'sectorid', 'sectorDescription', 'fueltypeid', 'fuelTypeDescription', 'consumption-for-eg-btu', 'consumption-for-eg-btu-units', 'total-consumption-btu', 'total-consumption-btu-units']\n\n# import to pandas dataframe\ndf = pd.DataFrame(rows, columns=columns)\ndf = df.drop(columns=['consumption-for-eg-btu-units', 'total-consumption-btu-units', 'fueltypeid', 'location', 'fuelTypeDescription', 'consumption-for-eg-btu', 'sectorid', 'stateDescription'])\n# export to csv\ndf.to_csv('EIA_API_py.csv', index=False)\n```\n\n## Result:\n\n![](images/paste-2.png)\n\n# **Consumption of Fuels for Electricity Generation and Useful Thermal Output(Coal)**\n\n## Cleaning:\n\n```{txt}\n# https://www.eia.gov/opendata/browser/electricity/electric-power-operational-data?frequency=annual&data=consumption-for-eg-btu;total-consumption-btu;&facets=fueltypeid;&fueltypeid=COW;&start=2013&end=2022&sortColumn=period;&sortDirection=desc;\nlibrary(httr)\nlibrary(jsonlite)\nlibrary(tidyverse)\nres <- GET(\"https://api.eia.gov/v2/electricity/electric-power-operational-data/data/?frequency=annual&data[0]=consumption-for-eg-btu&data[1]=total-consumption-btu&facets[fueltypeid][]=COW&start=2013&end=2022&sort[0][column]=period&sort[0][direction]=desc&offset=0&length=5000&api_key=Bc2HtlspmpvpzuBbPfIi8HoancNTzVYN9YApx3fu\")\ndata <- fromJSON(rawToChar(res$content))\ndata <- data$response\nperiod <- c(data$data$period)\nlocation <- c(data$data$location)\nstateDescription <- c(data$data$stateDescription)\nsectorid <- c(data$data$sectorid)\nsectorDescription <- c(data$data$sectorDescription)\ntotal_consumption_btu <- c(data$data$`total-consumption-btu`)\ndf <- data.frame(period, location, stateDescription, sectorid, sectorDescription, total_consumption_btu)\nwrite.csv(df, \"/Users/jackyzhang/Documents/Python/DSAN-5000/HW/HW2/Part2/Code/EIA_API_r.csv\", row.names=FALSE)\n```\n\n## Result:\n\n![](images/paste-4.png)","srcMarkdownNoYaml":"\n\n# Nuclear Energy Utilization Factor\n\n## Cleaning:\n\n\n\n### Code:\n\n```{txt}\n# From https://www.eia.gov/nuclear/generation/index.html\nimport pandas as pd\nimport numpy as np\n#pd read xlsx\nusreact13 = pd.read_excel('HW1/file/Nuclear_Generation/usreact13.xlsx')\nusreact14 = pd.read_excel('HW1/file/Nuclear_Generation/usreact14.xlsx')\nusreact15 = pd.read_excel('HW1/file/Nuclear_Generation/usreact15.xlsx')\nusreact16 = pd.read_excel('HW1/file/Nuclear_Generation/usreact16.xlsx')\nusreact17 = pd.read_excel('HW1/file/Nuclear_Generation/usreact17.xlsx')\nusreact18 = pd.read_excel('HW1/file/Nuclear_Generation/usreact18.xlsx')\nusreact19 = pd.read_excel('HW1/file/Nuclear_Generation/usreact19.xlsx')\nusreact20 = pd.read_excel('HW1/file/Nuclear_Generation/usreact20.xlsx')\nusreact21 = pd.read_excel('HW1/file/Nuclear_Generation/usreact21.xlsx')\nusreact22 = pd.read_excel('HW1/file/Nuclear_Generation/usreact22.xlsx')\n\n# create a function make row 5 as column names and remove row 0-4 and reset index and drop colum 4-17\ndef make_header(df):\n    df.columns = df.iloc[4]\n    df = df.drop(df.index[0:5])\n    df = df.reset_index(drop=True)\n    df = df.drop(df.columns[4:17], axis=1)\n    return df\n\n# apply the function to all dataframes\nusreact13 = make_header(usreact13)\nusreact14 = make_header(usreact14)\nusreact15 = make_header(usreact15)\nusreact16 = make_header(usreact16)\nusreact17 = make_header(usreact17)\nusreact18 = make_header(usreact18)\nusreact19 = make_header(usreact19)\nusreact20 = make_header(usreact20)\nusreact21 = make_header(usreact21)\nusreact22 = make_header(usreact22)\n\n# create a function to replace \".\" and empty space with NaN, drop \"Plant ID\" column and rename \"Plant Name\" to \"Plant\", make colum \"Nameplate\",\"Summer\", \"Utilization Factor\" as numeric\ndef clean_df(df):\n    df = df.replace(r'^\\s*$', np.nan, regex=True)\n    df = df.drop(columns=['Plant ID'])\n    df = df.rename(columns={'Plant Name':'Plant'})\n    df['Nameplate'] = pd.to_numeric(df['Nameplate'], errors='coerce')\n    df['Summer'] = pd.to_numeric(df['Summer'], errors='coerce')\n    df['Utilization Factor'] = pd.to_numeric(df['Utilization Factor'], errors='coerce')\n    return df\n\n# apply the function to all dataframes\nusreact13 = clean_df(usreact13)\nusreact14 = clean_df(usreact14)\nusreact15 = clean_df(usreact15)\nusreact16 = clean_df(usreact16)\nusreact17 = clean_df(usreact17)\nusreact18 = clean_df(usreact18)\nusreact19 = clean_df(usreact19)\nusreact20 = clean_df(usreact20)\nusreact21 = clean_df(usreact21)\nusreact22 = clean_df(usreact22)\n\n# drop rows that colum \"State\" end with \"Total\" and reset index\ndef drop_total(df):\n    df = df[~df['State'].str.contains(\"Total\")]\n    df = df.reset_index(drop=True)\n    df = df.drop(columns=['Unit ID'])\n    return df\n\n# apply the function to all dataframes\nusreact13 = drop_total(usreact13)\nusreact14 = drop_total(usreact14)\nusreact15 = drop_total(usreact15)\nusreact16 = drop_total(usreact16)\nusreact17 = drop_total(usreact17)\nusreact18 = drop_total(usreact18)\nusreact19 = drop_total(usreact19)\nusreact20 = drop_total(usreact20)\nusreact21 = drop_total(usreact21)\nusreact22 = drop_total(usreact22)\n\n# drop state column, Nameplate, Summer than group by plant and average the data to one decimal place and reset index\ndef group_plant(df):\n    df = df.drop(columns=['State', 'Nameplate', 'Summer'])\n    df = df.groupby(['Plant'], as_index=False).mean().round(1)\n    df = df.reset_index(drop=True)\n    return df\n# apply the function to all dataframes\nusreact13 = group_plant(usreact13)\nusreact14 = group_plant(usreact14)\nusreact15 = group_plant(usreact15)\nusreact16 = group_plant(usreact16)\nusreact17 = group_plant(usreact17)\nusreact18 = group_plant(usreact18)\nusreact19 = group_plant(usreact19)\nusreact20 = group_plant(usreact20)\nusreact21 = group_plant(usreact21)\nusreact22 = group_plant(usreact22)\n\n# merge all dataframes based on \"Plant\" column, create new columns 2013-2022 and fill in the data\nusreact = pd.merge(usreact13, usreact14, on='Plant', how='outer')\nusreact = usreact.rename(columns={'Utilization Factor_x':'2013', 'Utilization Factor_y':'2014'})\nusreact = pd.merge(usreact, usreact15, on='Plant', how='outer')\nusreact = usreact.rename(columns={'Utilization Factor':'2015'})\nusreact = pd.merge(usreact, usreact16, on='Plant', how='outer')\nusreact = usreact.rename(columns={'Utilization Factor':'2016'})\nusreact = pd.merge(usreact, usreact17, on='Plant', how='outer')\nusreact = usreact.rename(columns={'Utilization Factor':'2017'})\nusreact = pd.merge(usreact, usreact18, on='Plant', how='outer')\nusreact = usreact.rename(columns={'Utilization Factor':'2018'})\nusreact = pd.merge(usreact, usreact19, on='Plant', how='outer')\nusreact = usreact.rename(columns={'Utilization Factor':'2019'})\nusreact = pd.merge(usreact, usreact20, on='Plant', how='outer')\nusreact = usreact.rename(columns={'Utilization Factor':'2020'})\nusreact = pd.merge(usreact, usreact21, on='Plant', how='outer')\nusreact = usreact.rename(columns={'Utilization Factor':'2021'})\nusreact = pd.merge(usreact, usreact22, on='Plant', how='outer')\nusreact = usreact.rename(columns={'Utilization Factor':'2022'})\n\n# drop rows with NaN values and reset index\nusreact = usreact.dropna()\nusreact = usreact.reset_index(drop=True)\n\n# output the dataframe to csv\nusreact.to_csv('Nuclear_Energy_Utilization_Factor.csv', index=False)\n```\n\n## Result:\n\n![](images/paste-1.png)\n\n# **Consumption of Fuels for Electricity Generation and Useful Thermal Output(Nuclear)**\n\n## Cleaning:\n\n```{txt}\n# https://www.eia.gov/opendata/browser/electricity/electric-power-operational-data?frequency=annual&data=consumption-for-eg-btu;total-consumption-btu;&facets=fueltypeid;&fueltypeid=NUC;&start=2013&end=2022&sortColumn=period;&sortDirection=desc;\n# API_Key = \"Bc2HtlspmpvpzuBbPfIi8HoancNTzVYN9YApx3fu\"\nimport requests\nimport pandas as pd\nimport numpy as np \nimport json\nimport csv\nthor_url = \"https://api.eia.gov/v2/electricity/electric-power-operational-data/data/?frequency=annual&data[0]=consumption-for-eg-btu&data[1]=total-consumption-btu&facets[fueltypeid][]=NUC&start=2013&end=2022&sort[0][column]=period&sort[0][direction]=desc&offset=0&length=5000&api_key=Bc2HtlspmpvpzuBbPfIi8HoancNTzVYN9YApx3fu\"\nresp = requests.get(thor_url)\ndata = resp.text\ndata = json.loads(data)\ndetails=data['response']['data']\nrows=[]\nfor chunk in details:\n    row=[]\n    for key,value in chunk.items():\n        value=value if value else np.nan\n        row.append(value)\n        # print('row',row)\n    rows.append(row)\n\n# Columns\ncolumns = ['period', 'location', 'stateDescription', 'sectorid', 'sectorDescription', 'fueltypeid', 'fuelTypeDescription', 'consumption-for-eg-btu', 'consumption-for-eg-btu-units', 'total-consumption-btu', 'total-consumption-btu-units']\n\n# import to pandas dataframe\ndf = pd.DataFrame(rows, columns=columns)\ndf = df.drop(columns=['consumption-for-eg-btu-units', 'total-consumption-btu-units', 'fueltypeid', 'location', 'fuelTypeDescription', 'consumption-for-eg-btu', 'sectorid', 'stateDescription'])\n# export to csv\ndf.to_csv('EIA_API_py.csv', index=False)\n```\n\n## Result:\n\n![](images/paste-2.png)\n\n# **Consumption of Fuels for Electricity Generation and Useful Thermal Output(Coal)**\n\n## Cleaning:\n\n```{txt}\n# https://www.eia.gov/opendata/browser/electricity/electric-power-operational-data?frequency=annual&data=consumption-for-eg-btu;total-consumption-btu;&facets=fueltypeid;&fueltypeid=COW;&start=2013&end=2022&sortColumn=period;&sortDirection=desc;\nlibrary(httr)\nlibrary(jsonlite)\nlibrary(tidyverse)\nres <- GET(\"https://api.eia.gov/v2/electricity/electric-power-operational-data/data/?frequency=annual&data[0]=consumption-for-eg-btu&data[1]=total-consumption-btu&facets[fueltypeid][]=COW&start=2013&end=2022&sort[0][column]=period&sort[0][direction]=desc&offset=0&length=5000&api_key=Bc2HtlspmpvpzuBbPfIi8HoancNTzVYN9YApx3fu\")\ndata <- fromJSON(rawToChar(res$content))\ndata <- data$response\nperiod <- c(data$data$period)\nlocation <- c(data$data$location)\nstateDescription <- c(data$data$stateDescription)\nsectorid <- c(data$data$sectorid)\nsectorDescription <- c(data$data$sectorDescription)\ntotal_consumption_btu <- c(data$data$`total-consumption-btu`)\ndf <- data.frame(period, location, stateDescription, sectorid, sectorDescription, total_consumption_btu)\nwrite.csv(df, \"/Users/jackyzhang/Documents/Python/DSAN-5000/HW/HW2/Part2/Code/EIA_API_r.csv\", row.names=FALSE)\n```\n\n## Result:\n\n![](images/paste-4.png)"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"jupyter"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"format-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","toc":true,"output-file":"Cleaning.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.3.450","theme":"cosmo","title":"Cleaning"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}