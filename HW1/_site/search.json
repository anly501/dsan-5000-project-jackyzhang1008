[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About Me",
    "section": "",
    "text": "Jiachen Zhang, I graduated from Rutgers University this May with a double major in computer science and statistics. But I did not start with those majors in the first place. Instead, I started with a major in business. As I went on the business journey, I realized how statistics is the key to many industries and how powerful of a tool it can be in modern society. Moreover, as I started my class in statistics, I got more intrigued by how those methods can make a simile of useless data to tell a story and create a connection between different variables. As I was learning statistics, I discovered that coding plays an essential role in advancing statistics and data processing; as a result, I started computer science as a junior in college. I started late for a major and had to use my summer vacation to finish all required classes.\nGUID: jz922 GU Email: jz922@georgetown.edu"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "HW1",
    "section": "",
    "text": "This is a Quarto website.\nTo learn more about Quarto websites visit https://quarto.org/docs/websites."
  },
  {
    "objectID": "Introduction.html#radioecology-nuclear-energy-and-the-environment",
    "href": "Introduction.html#radioecology-nuclear-energy-and-the-environment",
    "title": "Nuclear Energy",
    "section": "Radioecology: nuclear energy and the environment",
    "text": "Radioecology: nuclear energy and the environment\nRadioecology is the field of study in which elements of physical and biological sciences are combined to pursue knowledge of radioactivity in the environment, including movement of radioactive materials and the effects of ionizing radiation on populations and on ecological organization. Volume I contains chapters on ecological principles, radiological principles, environmental radioactivity and radionuclide behavior in ecosystems. Chapter Four on environmental radioactivity characterizes sources, types, and amounts of material and man-made radioactive materials and radiation in the environment. Concepts of radionuclide behavior in ecosystems and behavior (movements and concentrations) of several important element groups in selected ecosystems are surveyed. A chapter on methods used for quantitative predictions of radionuclide transport in the environment gives a reasonably complete treatment to environmental transport processes, radionuclide kinetics in ecosystem compartments, and the use of transport models. Two chapters summarize the known effects of ionizing radiation on species, populations, and higher levels of ecological organization. This information is put into perspective in terms of risk and other consequences. Both volumes are well referenced. Appendices contain listings of major proceedings and books, reviews of specific radionuclides in the environment, and physical data used to characterize radionuclides. Radioecology: nuclear energy and the environment"
  },
  {
    "objectID": "Introduction.html#materials-for-future-nuclear-energy-systems",
    "href": "Introduction.html#materials-for-future-nuclear-energy-systems",
    "title": "Nuclear Energy",
    "section": "Materials for future nuclear energy systems",
    "text": "Materials for future nuclear energy systems\nMaterials for future nuclear energy systems must operate under more extreme conditions than those in current Gen II or Gen III systems. These conditions include higher temperature, higher dpa, and more corrosive environments. This paper reviews some of the fuels and structural materials used in advanced nuclear energy systems and identifies promising candidates for these systems. Fuel systems includes metallic fuels for the sodium cooled reactor, TRISO-coated particle fuel for the high temperature gas reactor, molten salt reactor fuels, and accident tolerant fuels for light water reactors. Structural materials applications include the sodium fast reactor, lead fast reactor, high temperature gas reactor, molten salt reactor and extended life light water reactors. A final section focuses on plasma-facing and blanket materials for deuterium-tritium fusion reactors.Materials for future nuclear energy systems"
  },
  {
    "objectID": "Introduction.html",
    "href": "Introduction.html",
    "title": "Nuclear Energy",
    "section": "",
    "text": "What is nuclear energy?\nWhy are we using nuclear energy?\nAdvantages of nuclear energy?\nDisadvantages of nuclear energy?\nHow to radioactive waste is managed?\nIs nuclear energy safe?\nIs there any environmental problem with nuclear energy?\nWhat is the difference between fission and fusion?\nHow do nuclear power plant work?\nWhat is the future for nuclear power?"
  },
  {
    "objectID": "Code.html",
    "href": "Code.html",
    "title": "Code",
    "section": "",
    "text": "jackyzhang1008\n\n\n\nThis is my GitHub"
  },
  {
    "objectID": "Code.html#username",
    "href": "Code.html#username",
    "title": "Code",
    "section": "",
    "text": "jackyzhang1008"
  },
  {
    "objectID": "Code.html#repo",
    "href": "Code.html#repo",
    "title": "Code",
    "section": "",
    "text": "This is my GitHub"
  },
  {
    "objectID": "Gathering.html",
    "href": "Gathering.html",
    "title": "Gathering",
    "section": "",
    "text": "There are 9 .xlsx file that shows the nuclear energy utilization for power plants in from 2013 to 2022. Within each table there are 20 columns.\nState: US State\nPlant ID: unique ID for a Nuclear power plant\nPlant Name: Nuclear power plant name\nUnit: reactor unit number\nJanuary - December: generating of electricity in Megawatthours\nYear_to_Date: generating of electricity in Megawatthours in the entire year\nNameplate:\nSummer:\nUtilization Factor: Summer/Nameplate, this shows how much of the power generated are been used\nData website\n\n\n\n# From https://www.eia.gov/nuclear/generation/index.html\nimport pandas as pd\nimport numpy as np\n#pd read xlsx\nusreact13 = pd.read_excel('HW1/file/Nuclear_Generation/usreact13.xlsx')\nusreact14 = pd.read_excel('HW1/file/Nuclear_Generation/usreact14.xlsx')\nusreact15 = pd.read_excel('HW1/file/Nuclear_Generation/usreact15.xlsx')\nusreact16 = pd.read_excel('HW1/file/Nuclear_Generation/usreact16.xlsx')\nusreact17 = pd.read_excel('HW1/file/Nuclear_Generation/usreact17.xlsx')\nusreact18 = pd.read_excel('HW1/file/Nuclear_Generation/usreact18.xlsx')\nusreact19 = pd.read_excel('HW1/file/Nuclear_Generation/usreact19.xlsx')\nusreact20 = pd.read_excel('HW1/file/Nuclear_Generation/usreact20.xlsx')\nusreact21 = pd.read_excel('HW1/file/Nuclear_Generation/usreact21.xlsx')\nusreact22 = pd.read_excel('HW1/file/Nuclear_Generation/usreact22.xlsx')"
  },
  {
    "objectID": "Cleaning.html",
    "href": "Cleaning.html",
    "title": "Cleaning",
    "section": "",
    "text": "# From https://www.eia.gov/nuclear/generation/index.html\nimport pandas as pd\nimport numpy as np\n#pd read xlsx\nusreact13 = pd.read_excel('HW1/file/Nuclear_Generation/usreact13.xlsx')\nusreact14 = pd.read_excel('HW1/file/Nuclear_Generation/usreact14.xlsx')\nusreact15 = pd.read_excel('HW1/file/Nuclear_Generation/usreact15.xlsx')\nusreact16 = pd.read_excel('HW1/file/Nuclear_Generation/usreact16.xlsx')\nusreact17 = pd.read_excel('HW1/file/Nuclear_Generation/usreact17.xlsx')\nusreact18 = pd.read_excel('HW1/file/Nuclear_Generation/usreact18.xlsx')\nusreact19 = pd.read_excel('HW1/file/Nuclear_Generation/usreact19.xlsx')\nusreact20 = pd.read_excel('HW1/file/Nuclear_Generation/usreact20.xlsx')\nusreact21 = pd.read_excel('HW1/file/Nuclear_Generation/usreact21.xlsx')\nusreact22 = pd.read_excel('HW1/file/Nuclear_Generation/usreact22.xlsx')\n\n# create a function make row 5 as column names and remove row 0-4 and reset index and drop colum 4-17\ndef make_header(df):\n    df.columns = df.iloc[4]\n    df = df.drop(df.index[0:5])\n    df = df.reset_index(drop=True)\n    df = df.drop(df.columns[4:17], axis=1)\n    return df\n\n# apply the function to all dataframes\nusreact13 = make_header(usreact13)\nusreact14 = make_header(usreact14)\nusreact15 = make_header(usreact15)\nusreact16 = make_header(usreact16)\nusreact17 = make_header(usreact17)\nusreact18 = make_header(usreact18)\nusreact19 = make_header(usreact19)\nusreact20 = make_header(usreact20)\nusreact21 = make_header(usreact21)\nusreact22 = make_header(usreact22)\n\n# create a function to replace \".\" and empty space with NaN, drop \"Plant ID\" column and rename \"Plant Name\" to \"Plant\", make colum \"Nameplate\",\"Summer\", \"Utilization Factor\" as numeric\ndef clean_df(df):\n    df = df.replace(r'^\\s*$', np.nan, regex=True)\n    df = df.drop(columns=['Plant ID'])\n    df = df.rename(columns={'Plant Name':'Plant'})\n    df['Nameplate'] = pd.to_numeric(df['Nameplate'], errors='coerce')\n    df['Summer'] = pd.to_numeric(df['Summer'], errors='coerce')\n    df['Utilization Factor'] = pd.to_numeric(df['Utilization Factor'], errors='coerce')\n    return df\n\n# apply the function to all dataframes\nusreact13 = clean_df(usreact13)\nusreact14 = clean_df(usreact14)\nusreact15 = clean_df(usreact15)\nusreact16 = clean_df(usreact16)\nusreact17 = clean_df(usreact17)\nusreact18 = clean_df(usreact18)\nusreact19 = clean_df(usreact19)\nusreact20 = clean_df(usreact20)\nusreact21 = clean_df(usreact21)\nusreact22 = clean_df(usreact22)\n\n# drop rows that colum \"State\" end with \"Total\" and reset index\ndef drop_total(df):\n    df = df[~df['State'].str.contains(\"Total\")]\n    df = df.reset_index(drop=True)\n    df = df.drop(columns=['Unit ID'])\n    return df\n\n# apply the function to all dataframes\nusreact13 = drop_total(usreact13)\nusreact14 = drop_total(usreact14)\nusreact15 = drop_total(usreact15)\nusreact16 = drop_total(usreact16)\nusreact17 = drop_total(usreact17)\nusreact18 = drop_total(usreact18)\nusreact19 = drop_total(usreact19)\nusreact20 = drop_total(usreact20)\nusreact21 = drop_total(usreact21)\nusreact22 = drop_total(usreact22)\n\n# drop state column, Nameplate, Summer than group by plant and average the data to one decimal place and reset index\ndef group_plant(df):\n    df = df.drop(columns=['State', 'Nameplate', 'Summer'])\n    df = df.groupby(['Plant'], as_index=False).mean().round(1)\n    df = df.reset_index(drop=True)\n    return df\n# apply the function to all dataframes\nusreact13 = group_plant(usreact13)\nusreact14 = group_plant(usreact14)\nusreact15 = group_plant(usreact15)\nusreact16 = group_plant(usreact16)\nusreact17 = group_plant(usreact17)\nusreact18 = group_plant(usreact18)\nusreact19 = group_plant(usreact19)\nusreact20 = group_plant(usreact20)\nusreact21 = group_plant(usreact21)\nusreact22 = group_plant(usreact22)\n\n# merge all dataframes based on \"Plant\" column, create new columns 2013-2022 and fill in the data\nusreact = pd.merge(usreact13, usreact14, on='Plant', how='outer')\nusreact = usreact.rename(columns={'Utilization Factor_x':'2013', 'Utilization Factor_y':'2014'})\nusreact = pd.merge(usreact, usreact15, on='Plant', how='outer')\nusreact = usreact.rename(columns={'Utilization Factor':'2015'})\nusreact = pd.merge(usreact, usreact16, on='Plant', how='outer')\nusreact = usreact.rename(columns={'Utilization Factor':'2016'})\nusreact = pd.merge(usreact, usreact17, on='Plant', how='outer')\nusreact = usreact.rename(columns={'Utilization Factor':'2017'})\nusreact = pd.merge(usreact, usreact18, on='Plant', how='outer')\nusreact = usreact.rename(columns={'Utilization Factor':'2018'})\nusreact = pd.merge(usreact, usreact19, on='Plant', how='outer')\nusreact = usreact.rename(columns={'Utilization Factor':'2019'})\nusreact = pd.merge(usreact, usreact20, on='Plant', how='outer')\nusreact = usreact.rename(columns={'Utilization Factor':'2020'})\nusreact = pd.merge(usreact, usreact21, on='Plant', how='outer')\nusreact = usreact.rename(columns={'Utilization Factor':'2021'})\nusreact = pd.merge(usreact, usreact22, on='Plant', how='outer')\nusreact = usreact.rename(columns={'Utilization Factor':'2022'})\n\n# drop rows with NaN values and reset index\nusreact = usreact.dropna()\nusreact = usreact.reset_index(drop=True)\n\n# output the dataframe to csv\nusreact.to_csv('Nuclear_Energy_Utilization_Factor.csv', index=False)"
  },
  {
    "objectID": "Cleaning.html#cleaning-1",
    "href": "Cleaning.html#cleaning-1",
    "title": "Cleaning",
    "section": "Cleaning:",
    "text": "Cleaning:\n# https://www.eia.gov/opendata/browser/electricity/electric-power-operational-data?frequency=annual&data=consumption-for-eg-btu;total-consumption-btu;&facets=fueltypeid;&fueltypeid=NUC;&start=2013&end=2022&sortColumn=period;&sortDirection=desc;\n# API_Key = \"Bc2HtlspmpvpzuBbPfIi8HoancNTzVYN9YApx3fu\"\nimport requests\nimport pandas as pd\nimport numpy as np \nimport json\nimport csv\nthor_url = \"https://api.eia.gov/v2/electricity/electric-power-operational-data/data/?frequency=annual&data[0]=consumption-for-eg-btu&data[1]=total-consumption-btu&facets[fueltypeid][]=NUC&start=2013&end=2022&sort[0][column]=period&sort[0][direction]=desc&offset=0&length=5000&api_key=Bc2HtlspmpvpzuBbPfIi8HoancNTzVYN9YApx3fu\"\nresp = requests.get(thor_url)\ndata = resp.text\ndata = json.loads(data)\ndetails=data['response']['data']\nrows=[]\nfor chunk in details:\n    row=[]\n    for key,value in chunk.items():\n        value=value if value else np.nan\n        row.append(value)\n        # print('row',row)\n    rows.append(row)\n\n# Columns\ncolumns = ['period', 'location', 'stateDescription', 'sectorid', 'sectorDescription', 'fueltypeid', 'fuelTypeDescription', 'consumption-for-eg-btu', 'consumption-for-eg-btu-units', 'total-consumption-btu', 'total-consumption-btu-units']\n\n# import to pandas dataframe\ndf = pd.DataFrame(rows, columns=columns)\ndf = df.drop(columns=['consumption-for-eg-btu-units', 'total-consumption-btu-units', 'fueltypeid', 'location', 'fuelTypeDescription', 'consumption-for-eg-btu', 'sectorid', 'stateDescription'])\n# export to csv\ndf.to_csv('EIA_API_py.csv', index=False)"
  },
  {
    "objectID": "Cleaning.html#link-1",
    "href": "Cleaning.html#link-1",
    "title": "Cleaning",
    "section": "Link:",
    "text": "Link:"
  },
  {
    "objectID": "Cleaning.html#cleaning-2",
    "href": "Cleaning.html#cleaning-2",
    "title": "Cleaning",
    "section": "Cleaning:",
    "text": "Cleaning:\n# https://www.eia.gov/opendata/browser/electricity/electric-power-operational-data?frequency=annual&data=consumption-for-eg-btu;total-consumption-btu;&facets=fueltypeid;&fueltypeid=COW;&start=2013&end=2022&sortColumn=period;&sortDirection=desc;\nlibrary(httr)\nlibrary(jsonlite)\nlibrary(tidyverse)\nres &lt;- GET(\"https://api.eia.gov/v2/electricity/electric-power-operational-data/data/?frequency=annual&data[0]=consumption-for-eg-btu&data[1]=total-consumption-btu&facets[fueltypeid][]=COW&start=2013&end=2022&sort[0][column]=period&sort[0][direction]=desc&offset=0&length=5000&api_key=Bc2HtlspmpvpzuBbPfIi8HoancNTzVYN9YApx3fu\")\ndata &lt;- fromJSON(rawToChar(res$content))\ndata &lt;- data$response\nperiod &lt;- c(data$data$period)\nlocation &lt;- c(data$data$location)\nstateDescription &lt;- c(data$data$stateDescription)\nsectorid &lt;- c(data$data$sectorid)\nsectorDescription &lt;- c(data$data$sectorDescription)\ntotal_consumption_btu &lt;- c(data$data$`total-consumption-btu`)\ndf &lt;- data.frame(period, location, stateDescription, sectorid, sectorDescription, total_consumption_btu)\nwrite.csv(df, \"/Users/jackyzhang/Documents/Python/DSAN-5000/HW/HW2/Part2/Code/EIA_API_r.csv\", row.names=FALSE)"
  },
  {
    "objectID": "Cleaning.html#link-2",
    "href": "Cleaning.html#link-2",
    "title": "Cleaning",
    "section": "Link:",
    "text": "Link:"
  },
  {
    "objectID": "Cleaning.html#cleaning",
    "href": "Cleaning.html#cleaning",
    "title": "Cleaning",
    "section": "",
    "text": "# From https://www.eia.gov/nuclear/generation/index.html\nimport pandas as pd\nimport numpy as np\n#pd read xlsx\nusreact13 = pd.read_excel('HW1/file/Nuclear_Generation/usreact13.xlsx')\nusreact14 = pd.read_excel('HW1/file/Nuclear_Generation/usreact14.xlsx')\nusreact15 = pd.read_excel('HW1/file/Nuclear_Generation/usreact15.xlsx')\nusreact16 = pd.read_excel('HW1/file/Nuclear_Generation/usreact16.xlsx')\nusreact17 = pd.read_excel('HW1/file/Nuclear_Generation/usreact17.xlsx')\nusreact18 = pd.read_excel('HW1/file/Nuclear_Generation/usreact18.xlsx')\nusreact19 = pd.read_excel('HW1/file/Nuclear_Generation/usreact19.xlsx')\nusreact20 = pd.read_excel('HW1/file/Nuclear_Generation/usreact20.xlsx')\nusreact21 = pd.read_excel('HW1/file/Nuclear_Generation/usreact21.xlsx')\nusreact22 = pd.read_excel('HW1/file/Nuclear_Generation/usreact22.xlsx')\n\n# create a function make row 5 as column names and remove row 0-4 and reset index and drop colum 4-17\ndef make_header(df):\n    df.columns = df.iloc[4]\n    df = df.drop(df.index[0:5])\n    df = df.reset_index(drop=True)\n    df = df.drop(df.columns[4:17], axis=1)\n    return df\n\n# apply the function to all dataframes\nusreact13 = make_header(usreact13)\nusreact14 = make_header(usreact14)\nusreact15 = make_header(usreact15)\nusreact16 = make_header(usreact16)\nusreact17 = make_header(usreact17)\nusreact18 = make_header(usreact18)\nusreact19 = make_header(usreact19)\nusreact20 = make_header(usreact20)\nusreact21 = make_header(usreact21)\nusreact22 = make_header(usreact22)\n\n# create a function to replace \".\" and empty space with NaN, drop \"Plant ID\" column and rename \"Plant Name\" to \"Plant\", make colum \"Nameplate\",\"Summer\", \"Utilization Factor\" as numeric\ndef clean_df(df):\n    df = df.replace(r'^\\s*$', np.nan, regex=True)\n    df = df.drop(columns=['Plant ID'])\n    df = df.rename(columns={'Plant Name':'Plant'})\n    df['Nameplate'] = pd.to_numeric(df['Nameplate'], errors='coerce')\n    df['Summer'] = pd.to_numeric(df['Summer'], errors='coerce')\n    df['Utilization Factor'] = pd.to_numeric(df['Utilization Factor'], errors='coerce')\n    return df\n\n# apply the function to all dataframes\nusreact13 = clean_df(usreact13)\nusreact14 = clean_df(usreact14)\nusreact15 = clean_df(usreact15)\nusreact16 = clean_df(usreact16)\nusreact17 = clean_df(usreact17)\nusreact18 = clean_df(usreact18)\nusreact19 = clean_df(usreact19)\nusreact20 = clean_df(usreact20)\nusreact21 = clean_df(usreact21)\nusreact22 = clean_df(usreact22)\n\n# drop rows that colum \"State\" end with \"Total\" and reset index\ndef drop_total(df):\n    df = df[~df['State'].str.contains(\"Total\")]\n    df = df.reset_index(drop=True)\n    df = df.drop(columns=['Unit ID'])\n    return df\n\n# apply the function to all dataframes\nusreact13 = drop_total(usreact13)\nusreact14 = drop_total(usreact14)\nusreact15 = drop_total(usreact15)\nusreact16 = drop_total(usreact16)\nusreact17 = drop_total(usreact17)\nusreact18 = drop_total(usreact18)\nusreact19 = drop_total(usreact19)\nusreact20 = drop_total(usreact20)\nusreact21 = drop_total(usreact21)\nusreact22 = drop_total(usreact22)\n\n# drop state column, Nameplate, Summer than group by plant and average the data to one decimal place and reset index\ndef group_plant(df):\n    df = df.drop(columns=['State', 'Nameplate', 'Summer'])\n    df = df.groupby(['Plant'], as_index=False).mean().round(1)\n    df = df.reset_index(drop=True)\n    return df\n# apply the function to all dataframes\nusreact13 = group_plant(usreact13)\nusreact14 = group_plant(usreact14)\nusreact15 = group_plant(usreact15)\nusreact16 = group_plant(usreact16)\nusreact17 = group_plant(usreact17)\nusreact18 = group_plant(usreact18)\nusreact19 = group_plant(usreact19)\nusreact20 = group_plant(usreact20)\nusreact21 = group_plant(usreact21)\nusreact22 = group_plant(usreact22)\n\n# merge all dataframes based on \"Plant\" column, create new columns 2013-2022 and fill in the data\nusreact = pd.merge(usreact13, usreact14, on='Plant', how='outer')\nusreact = usreact.rename(columns={'Utilization Factor_x':'2013', 'Utilization Factor_y':'2014'})\nusreact = pd.merge(usreact, usreact15, on='Plant', how='outer')\nusreact = usreact.rename(columns={'Utilization Factor':'2015'})\nusreact = pd.merge(usreact, usreact16, on='Plant', how='outer')\nusreact = usreact.rename(columns={'Utilization Factor':'2016'})\nusreact = pd.merge(usreact, usreact17, on='Plant', how='outer')\nusreact = usreact.rename(columns={'Utilization Factor':'2017'})\nusreact = pd.merge(usreact, usreact18, on='Plant', how='outer')\nusreact = usreact.rename(columns={'Utilization Factor':'2018'})\nusreact = pd.merge(usreact, usreact19, on='Plant', how='outer')\nusreact = usreact.rename(columns={'Utilization Factor':'2019'})\nusreact = pd.merge(usreact, usreact20, on='Plant', how='outer')\nusreact = usreact.rename(columns={'Utilization Factor':'2020'})\nusreact = pd.merge(usreact, usreact21, on='Plant', how='outer')\nusreact = usreact.rename(columns={'Utilization Factor':'2021'})\nusreact = pd.merge(usreact, usreact22, on='Plant', how='outer')\nusreact = usreact.rename(columns={'Utilization Factor':'2022'})\n\n# drop rows with NaN values and reset index\nusreact = usreact.dropna()\nusreact = usreact.reset_index(drop=True)\n\n# output the dataframe to csv\nusreact.to_csv('Nuclear_Energy_Utilization_Factor.csv', index=False)"
  },
  {
    "objectID": "Cleaning.html#link",
    "href": "Cleaning.html#link",
    "title": "Cleaning",
    "section": "Link:",
    "text": "Link:"
  },
  {
    "objectID": "Cleaning.html#result-1",
    "href": "Cleaning.html#result-1",
    "title": "Cleaning",
    "section": "Result:",
    "text": "Result:"
  },
  {
    "objectID": "Cleaning.html#result-2",
    "href": "Cleaning.html#result-2",
    "title": "Cleaning",
    "section": "Result:",
    "text": "Result:"
  },
  {
    "objectID": "Gathering.html#description-of-the-data",
    "href": "Gathering.html#description-of-the-data",
    "title": "Gathering",
    "section": "",
    "text": "There are 9 .xlsx file that shows the nuclear energy utilization for power plants in from 2013 to 2022. Within each table there are 20 columns.\nState: US State\nPlant ID: unique ID for a Nuclear power plant\nPlant Name: Nuclear power plant name\nUnit: reactor unit number\nJanuary - December: generating of electricity in Megawatthours\nYear_to_Date: generating of electricity in Megawatthours in the entire year\nNameplate:\nSummer:\nUtilization Factor: Summer/Nameplate, this shows how much of the power generated are been used\nData website"
  },
  {
    "objectID": "Gathering.html#use-excel-to-get-the-data",
    "href": "Gathering.html#use-excel-to-get-the-data",
    "title": "Gathering",
    "section": "",
    "text": "# From https://www.eia.gov/nuclear/generation/index.html\nimport pandas as pd\nimport numpy as np\n#pd read xlsx\nusreact13 = pd.read_excel('HW1/file/Nuclear_Generation/usreact13.xlsx')\nusreact14 = pd.read_excel('HW1/file/Nuclear_Generation/usreact14.xlsx')\nusreact15 = pd.read_excel('HW1/file/Nuclear_Generation/usreact15.xlsx')\nusreact16 = pd.read_excel('HW1/file/Nuclear_Generation/usreact16.xlsx')\nusreact17 = pd.read_excel('HW1/file/Nuclear_Generation/usreact17.xlsx')\nusreact18 = pd.read_excel('HW1/file/Nuclear_Generation/usreact18.xlsx')\nusreact19 = pd.read_excel('HW1/file/Nuclear_Generation/usreact19.xlsx')\nusreact20 = pd.read_excel('HW1/file/Nuclear_Generation/usreact20.xlsx')\nusreact21 = pd.read_excel('HW1/file/Nuclear_Generation/usreact21.xlsx')\nusreact22 = pd.read_excel('HW1/file/Nuclear_Generation/usreact22.xlsx')"
  },
  {
    "objectID": "Gathering.html#description-of-the-data-1",
    "href": "Gathering.html#description-of-the-data-1",
    "title": "Gathering",
    "section": "Description of the data",
    "text": "Description of the data\nperiod: years 2013-2022\nlocation: US state, US\nstateDescription: description of the location\nsectorid: unique ID for planet\nsectorDescription: planet name\nfueltypeid: all nuclear\nfuelTypeDescription: all nuclear\nconsumption-for-eg-btu: fuel usage\nconsumption-for-eg-btu-units: units in million MMBtu\ntotal-consumption-btu: total fuel usage\ntotal-consumption-btu-units: units in million MMBtu\nData website"
  },
  {
    "objectID": "Gathering.html#use-python-api-to-get-the-data",
    "href": "Gathering.html#use-python-api-to-get-the-data",
    "title": "Gathering",
    "section": "Use python API to get the data",
    "text": "Use python API to get the data\n# https://www.eia.gov/opendata/browser/electricity/electric-power-operational-data?frequency=annual&data=consumption-for-eg-btu;total-consumption-btu;&facets=fueltypeid;&fueltypeid=NUC;&start=2013&end=2022&sortColumn=period;&sortDirection=desc;\n# API_Key = \"Bc2HtlspmpvpzuBbPfIi8HoancNTzVYN9YApx3fu\"\nimport requests\nimport pandas as pd\nimport numpy as np \nimport json\nimport csv\nthor_url = \"https://api.eia.gov/v2/electricity/electric-power-operational-data/data/?frequency=annual&data[0]=consumption-for-eg-btu&data[1]=total-consumption-btu&facets[fueltypeid][]=NUC&start=2013&end=2022&sort[0][column]=period&sort[0][direction]=desc&offset=0&length=5000&api_key=Bc2HtlspmpvpzuBbPfIi8HoancNTzVYN9YApx3fu\"\nresp = requests.get(thor_url)\ndata = resp.text\ndata = json.loads(data)\ndetails=data['response']['data']\nrows=[]\nfor chunk in details:\n    row=[]\n    for key,value in chunk.items():\n        value=value if value else np.nan\n        row.append(value)\n        # print('row',row)\n    rows.append(row)\n\n# Columns\ncolumns = ['period', 'location', 'stateDescription', 'sectorid', 'sectorDescription', 'fueltypeid', 'fuelTypeDescription', 'consumption-for-eg-btu', 'consumption-for-eg-btu-units', 'total-consumption-btu', 'total-consumption-btu-units']"
  },
  {
    "objectID": "Gathering.html#description-of-the-data-2",
    "href": "Gathering.html#description-of-the-data-2",
    "title": "Gathering",
    "section": "Description of the data",
    "text": "Description of the data\nperiod: years 2013-2022\nlocation: US state, US\nstateDescription: description of the location\nsectorid: unique ID for planet\nsectorDescription: planet name\nfueltypeid: all coal\nfuelTypeDescription: all coal\nconsumption-for-eg-btu: fuel usage\nconsumption-for-eg-btu-units: units in million MMBtu\ntotal-consumption-btu: total fuel usage\ntotal-consumption-btu-units: units in million MMBtu\nData website"
  },
  {
    "objectID": "Gathering.html#use-r-api-to-get-the-data",
    "href": "Gathering.html#use-r-api-to-get-the-data",
    "title": "Gathering",
    "section": "Use r API to get the data",
    "text": "Use r API to get the data\n# https://www.eia.gov/opendata/browser/electricity/electric-power-operational-data?frequency=annual&data=consumption-for-eg-btu;total-consumption-btu;&facets=fueltypeid;&fueltypeid=COW;&start=2013&end=2022&sortColumn=period;&sortDirection=desc;\nlibrary(httr)\nlibrary(jsonlite)\nlibrary(tidyverse)\nres &lt;- GET(\"https://api.eia.gov/v2/electricity/electric-power-operational-data/data/?frequency=annual&data[0]=consumption-for-eg-btu&data[1]=total-consumption-btu&facets[fueltypeid][]=COW&start=2013&end=2022&sort[0][column]=period&sort[0][direction]=desc&offset=0&length=5000&api_key=Bc2HtlspmpvpzuBbPfIi8HoancNTzVYN9YApx3fu\")\ndata &lt;- fromJSON(rawToChar(res$content))"
  }
]